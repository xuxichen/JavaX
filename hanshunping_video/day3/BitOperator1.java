public class BitOperator1 {
    public static void main(String[] args) {

        /**
            1 的补码: 00000000 00000000 00000000 00000001
            1>>2     00000000 00000000 00000000 00000000
        */
        int a = 1>>2; //算术右移 
        /**
            -1 的原码:  10000000 00000000 00000000 00000001
            -1 的反码:  11111111 11111111 11111111 11111110
            -1 的补码:  11111111 11111111 11111111 11111111
            -1>>2补码:  11111111 11111111 11111111 11111111
            -1>>2的反码 10000000 00000000 00000000 00000000
            -1>>2的原码 10000000 00000000 00000000 00000001
         */
        int b = -1>>2;
        /**
            1 的补码: 00000000 00000000 00000000 00000001
            1>>2     00000000 00000000 00000000 00000100 = 4（三码合一）
        */
        int c = 1<<2;// 算术左移 （相当于左边的x*2^(右边的数)）
        /**
            -1 的原码:  10000000 00000000 00000000 00000001
            -1 的反码:  11111111 11111111 11111111 11111110
            -1 的补码:  11111111 11111111 11111111 11111111
            -1<<2补码:  11111111 11111111 11111111 11111100
            -1<<2的反码 10000000 00000000 00000000 00000011
            -1<<2的原码 10000000 00000000 00000000 00000100
         */
        int d = -1<<2;
        int e = 12>>>2; // 无符号右移


        System.out.println("a == " + a);
        System.out.println("b == " + b);
        System.out.println("c == " + c);
        System.out.println("d == " + d);
        System.out.println("e == " + e);
        System.out.println(15>>2);
        System.out.println(3<<4);
    }
}